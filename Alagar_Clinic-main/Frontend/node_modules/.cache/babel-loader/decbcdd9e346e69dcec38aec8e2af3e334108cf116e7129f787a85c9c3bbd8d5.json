{"ast":null,"code":"import { getStyle as getCheckboxStyle } from '../../checkbox/style';\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\nimport { genTreeStyle, initComponentToken } from '../../tree/style';\n// =============================== Base ===============================\nconst genBaseStyle = token => {\n  const {\n    componentCls,\n    treePrefixCls,\n    colorBgElevated\n  } = token;\n  const treeCls = \".\".concat(treePrefixCls);\n  return [\n  // ======================================================\n  // ==                     Dropdown                     ==\n  // ======================================================\n  {\n    [\"\".concat(componentCls, \"-dropdown\")]: [{\n      padding: \"\".concat(token.paddingXS, \"px \").concat(token.paddingXS / 2, \"px\")\n    },\n    // ====================== Tree ======================\n    genTreeStyle(treePrefixCls, mergeToken(token, {\n      colorBgContainer: colorBgElevated\n    })), {\n      [treeCls]: {\n        borderRadius: 0,\n        [\"\".concat(treeCls, \"-list-holder-inner\")]: {\n          alignItems: 'stretch',\n          [\"\".concat(treeCls, \"-treenode\")]: {\n            [\"\".concat(treeCls, \"-node-content-wrapper\")]: {\n              flex: 'auto'\n            }\n          }\n        }\n      }\n    },\n    // ==================== Checkbox ====================\n    getCheckboxStyle(\"\".concat(treePrefixCls, \"-checkbox\"), token),\n    // ====================== RTL =======================\n    {\n      '&-rtl': {\n        direction: 'rtl',\n        [\"\".concat(treeCls, \"-switcher\").concat(treeCls, \"-switcher_close\")]: {\n          [\"\".concat(treeCls, \"-switcher-icon svg\")]: {\n            transform: 'rotate(90deg)'\n          }\n        }\n      }\n    }]\n  }];\n};\n// ============================== Export ==============================\nexport default function useTreeSelectStyle(prefixCls, treePrefixCls) {\n  return genComponentStyleHook('TreeSelect', token => {\n    const treeSelectToken = mergeToken(token, {\n      treePrefixCls\n    });\n    return [genBaseStyle(treeSelectToken)];\n  }, initComponentToken)(prefixCls);\n}","map":{"version":3,"names":["getStyle","getCheckboxStyle","genComponentStyleHook","mergeToken","genTreeStyle","initComponentToken","genBaseStyle","token","componentCls","treePrefixCls","colorBgElevated","treeCls","concat","padding","paddingXS","colorBgContainer","borderRadius","alignItems","flex","direction","transform","useTreeSelectStyle","prefixCls","treeSelectToken"],"sources":["C:/Users/HP/Downloads/Alagar_Clinic-main/Alagar_Clinic-main/Frontend/node_modules/antd/es/tree-select/style/index.js"],"sourcesContent":["import { getStyle as getCheckboxStyle } from '../../checkbox/style';\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\nimport { genTreeStyle, initComponentToken } from '../../tree/style';\n// =============================== Base ===============================\nconst genBaseStyle = token => {\n  const {\n    componentCls,\n    treePrefixCls,\n    colorBgElevated\n  } = token;\n  const treeCls = `.${treePrefixCls}`;\n  return [\n  // ======================================================\n  // ==                     Dropdown                     ==\n  // ======================================================\n  {\n    [`${componentCls}-dropdown`]: [{\n      padding: `${token.paddingXS}px ${token.paddingXS / 2}px`\n    },\n    // ====================== Tree ======================\n    genTreeStyle(treePrefixCls, mergeToken(token, {\n      colorBgContainer: colorBgElevated\n    })), {\n      [treeCls]: {\n        borderRadius: 0,\n        [`${treeCls}-list-holder-inner`]: {\n          alignItems: 'stretch',\n          [`${treeCls}-treenode`]: {\n            [`${treeCls}-node-content-wrapper`]: {\n              flex: 'auto'\n            }\n          }\n        }\n      }\n    },\n    // ==================== Checkbox ====================\n    getCheckboxStyle(`${treePrefixCls}-checkbox`, token),\n    // ====================== RTL =======================\n    {\n      '&-rtl': {\n        direction: 'rtl',\n        [`${treeCls}-switcher${treeCls}-switcher_close`]: {\n          [`${treeCls}-switcher-icon svg`]: {\n            transform: 'rotate(90deg)'\n          }\n        }\n      }\n    }]\n  }];\n};\n// ============================== Export ==============================\nexport default function useTreeSelectStyle(prefixCls, treePrefixCls) {\n  return genComponentStyleHook('TreeSelect', token => {\n    const treeSelectToken = mergeToken(token, {\n      treePrefixCls\n    });\n    return [genBaseStyle(treeSelectToken)];\n  }, initComponentToken)(prefixCls);\n}"],"mappings":"AAAA,SAASA,QAAQ,IAAIC,gBAAgB,QAAQ,sBAAsB;AACnE,SAASC,qBAAqB,EAAEC,UAAU,QAAQ,sBAAsB;AACxE,SAASC,YAAY,EAAEC,kBAAkB,QAAQ,kBAAkB;AACnE;AACA,MAAMC,YAAY,GAAGC,KAAK,IAAI;EAC5B,MAAM;IACJC,YAAY;IACZC,aAAa;IACbC;EACF,CAAC,GAAGH,KAAK;EACT,MAAMI,OAAO,OAAAC,MAAA,CAAOH,aAAa,CAAE;EACnC,OAAO;EACP;EACA;EACA;EACA;IACE,IAAAG,MAAA,CAAIJ,YAAY,iBAAc,CAAC;MAC7BK,OAAO,KAAAD,MAAA,CAAKL,KAAK,CAACO,SAAS,SAAAF,MAAA,CAAML,KAAK,CAACO,SAAS,GAAG,CAAC;IACtD,CAAC;IACD;IACAV,YAAY,CAACK,aAAa,EAAEN,UAAU,CAACI,KAAK,EAAE;MAC5CQ,gBAAgB,EAAEL;IACpB,CAAC,CAAC,CAAC,EAAE;MACH,CAACC,OAAO,GAAG;QACTK,YAAY,EAAE,CAAC;QACf,IAAAJ,MAAA,CAAID,OAAO,0BAAuB;UAChCM,UAAU,EAAE,SAAS;UACrB,IAAAL,MAAA,CAAID,OAAO,iBAAc;YACvB,IAAAC,MAAA,CAAID,OAAO,6BAA0B;cACnCO,IAAI,EAAE;YACR;UACF;QACF;MACF;IACF,CAAC;IACD;IACAjB,gBAAgB,IAAAW,MAAA,CAAIH,aAAa,gBAAaF,KAAK,CAAC;IACpD;IACA;MACE,OAAO,EAAE;QACPY,SAAS,EAAE,KAAK;QAChB,IAAAP,MAAA,CAAID,OAAO,eAAAC,MAAA,CAAYD,OAAO,uBAAoB;UAChD,IAAAC,MAAA,CAAID,OAAO,0BAAuB;YAChCS,SAAS,EAAE;UACb;QACF;MACF;IACF,CAAC;EACH,CAAC,CAAC;AACJ,CAAC;AACD;AACA,eAAe,SAASC,kBAAkBA,CAACC,SAAS,EAAEb,aAAa,EAAE;EACnE,OAAOP,qBAAqB,CAAC,YAAY,EAAEK,KAAK,IAAI;IAClD,MAAMgB,eAAe,GAAGpB,UAAU,CAACI,KAAK,EAAE;MACxCE;IACF,CAAC,CAAC;IACF,OAAO,CAACH,YAAY,CAACiB,eAAe,CAAC,CAAC;EACxC,CAAC,EAAElB,kBAAkB,CAAC,CAACiB,SAAS,CAAC;AACnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}