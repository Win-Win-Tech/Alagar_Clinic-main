{"ast":null,"code":"\"use client\";\n\nimport { Keyframes } from '@ant-design/cssinjs';\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\nconst skeletonClsLoading = new Keyframes(\"ant-skeleton-loading\", {\n  '0%': {\n    backgroundPosition: '100% 50%'\n  },\n  '100%': {\n    backgroundPosition: '0 50%'\n  }\n});\nconst genSkeletonElementCommonSize = size => ({\n  height: size,\n  lineHeight: \"\".concat(size, \"px\")\n});\nconst genSkeletonElementAvatarSize = size => Object.assign({\n  width: size\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonColor = token => ({\n  background: token.skeletonLoadingBackground,\n  backgroundSize: '400% 100%',\n  animationName: skeletonClsLoading,\n  animationDuration: token.skeletonLoadingMotionDuration,\n  animationTimingFunction: 'ease',\n  animationIterationCount: 'infinite'\n});\nconst genSkeletonElementInputSize = size => Object.assign({\n  width: size * 5,\n  minWidth: size * 5\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementAvatar = token => {\n  const {\n    skeletonAvatarCls,\n    gradientFromColor,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM\n  } = token;\n  return {\n    [\"\".concat(skeletonAvatarCls)]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: gradientFromColor\n    }, genSkeletonElementAvatarSize(controlHeight)),\n    [\"\".concat(skeletonAvatarCls).concat(skeletonAvatarCls, \"-circle\")]: {\n      borderRadius: '50%'\n    },\n    [\"\".concat(skeletonAvatarCls).concat(skeletonAvatarCls, \"-lg\")]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG)),\n    [\"\".concat(skeletonAvatarCls).concat(skeletonAvatarCls, \"-sm\")]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))\n  };\n};\nconst genSkeletonElementInput = token => {\n  const {\n    controlHeight,\n    borderRadiusSM,\n    skeletonInputCls,\n    controlHeightLG,\n    controlHeightSM,\n    gradientFromColor\n  } = token;\n  return {\n    [\"\".concat(skeletonInputCls)]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: gradientFromColor,\n      borderRadius: borderRadiusSM\n    }, genSkeletonElementInputSize(controlHeight)),\n    [\"\".concat(skeletonInputCls, \"-lg\")]: Object.assign({}, genSkeletonElementInputSize(controlHeightLG)),\n    [\"\".concat(skeletonInputCls, \"-sm\")]: Object.assign({}, genSkeletonElementInputSize(controlHeightSM))\n  };\n};\nconst genSkeletonElementImageSize = size => Object.assign({\n  width: size\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementImage = token => {\n  const {\n    skeletonImageCls,\n    imageSizeBase,\n    gradientFromColor,\n    borderRadiusSM\n  } = token;\n  return {\n    [\"\".concat(skeletonImageCls)]: Object.assign(Object.assign({\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      verticalAlign: 'top',\n      background: gradientFromColor,\n      borderRadius: borderRadiusSM\n    }, genSkeletonElementImageSize(imageSizeBase * 2)), {\n      [\"\".concat(skeletonImageCls, \"-path\")]: {\n        fill: '#bfbfbf'\n      },\n      [\"\".concat(skeletonImageCls, \"-svg\")]: Object.assign(Object.assign({}, genSkeletonElementImageSize(imageSizeBase)), {\n        maxWidth: imageSizeBase * 4,\n        maxHeight: imageSizeBase * 4\n      }),\n      [\"\".concat(skeletonImageCls, \"-svg\").concat(skeletonImageCls, \"-svg-circle\")]: {\n        borderRadius: '50%'\n      }\n    }),\n    [\"\".concat(skeletonImageCls).concat(skeletonImageCls, \"-circle\")]: {\n      borderRadius: '50%'\n    }\n  };\n};\nconst genSkeletonElementButtonShape = (token, size, buttonCls) => {\n  const {\n    skeletonButtonCls\n  } = token;\n  return {\n    [\"\".concat(buttonCls).concat(skeletonButtonCls, \"-circle\")]: {\n      width: size,\n      minWidth: size,\n      borderRadius: '50%'\n    },\n    [\"\".concat(buttonCls).concat(skeletonButtonCls, \"-round\")]: {\n      borderRadius: size\n    }\n  };\n};\nconst genSkeletonElementButtonSize = size => Object.assign({\n  width: size * 2,\n  minWidth: size * 2\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementButton = token => {\n  const {\n    borderRadiusSM,\n    skeletonButtonCls,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    gradientFromColor\n  } = token;\n  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n    [\"\".concat(skeletonButtonCls)]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: gradientFromColor,\n      borderRadius: borderRadiusSM,\n      width: controlHeight * 2,\n      minWidth: controlHeight * 2\n    }, genSkeletonElementButtonSize(controlHeight))\n  }, genSkeletonElementButtonShape(token, controlHeight, skeletonButtonCls)), {\n    [\"\".concat(skeletonButtonCls, \"-lg\")]: Object.assign({}, genSkeletonElementButtonSize(controlHeightLG))\n  }), genSkeletonElementButtonShape(token, controlHeightLG, \"\".concat(skeletonButtonCls, \"-lg\"))), {\n    [\"\".concat(skeletonButtonCls, \"-sm\")]: Object.assign({}, genSkeletonElementButtonSize(controlHeightSM))\n  }), genSkeletonElementButtonShape(token, controlHeightSM, \"\".concat(skeletonButtonCls, \"-sm\")));\n};\n// =============================== Base ===============================\nconst genBaseStyle = token => {\n  const {\n    componentCls,\n    skeletonAvatarCls,\n    skeletonTitleCls,\n    skeletonParagraphCls,\n    skeletonButtonCls,\n    skeletonInputCls,\n    skeletonImageCls,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    gradientFromColor,\n    padding,\n    marginSM,\n    borderRadius,\n    titleHeight,\n    blockRadius,\n    paragraphLiHeight,\n    controlHeightXS,\n    paragraphMarginTop\n  } = token;\n  return {\n    [\"\".concat(componentCls)]: {\n      display: 'table',\n      width: '100%',\n      [\"\".concat(componentCls, \"-header\")]: {\n        display: 'table-cell',\n        paddingInlineEnd: padding,\n        verticalAlign: 'top',\n        // Avatar\n        [\"\".concat(skeletonAvatarCls)]: Object.assign({\n          display: 'inline-block',\n          verticalAlign: 'top',\n          background: gradientFromColor\n        }, genSkeletonElementAvatarSize(controlHeight)),\n        [\"\".concat(skeletonAvatarCls, \"-circle\")]: {\n          borderRadius: '50%'\n        },\n        [\"\".concat(skeletonAvatarCls, \"-lg\")]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG)),\n        [\"\".concat(skeletonAvatarCls, \"-sm\")]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))\n      },\n      [\"\".concat(componentCls, \"-content\")]: {\n        display: 'table-cell',\n        width: '100%',\n        verticalAlign: 'top',\n        // Title\n        [\"\".concat(skeletonTitleCls)]: {\n          width: '100%',\n          height: titleHeight,\n          background: gradientFromColor,\n          borderRadius: blockRadius,\n          [\"+ \".concat(skeletonParagraphCls)]: {\n            marginBlockStart: controlHeightSM\n          }\n        },\n        // paragraph\n        [\"\".concat(skeletonParagraphCls)]: {\n          padding: 0,\n          '> li': {\n            width: '100%',\n            height: paragraphLiHeight,\n            listStyle: 'none',\n            background: gradientFromColor,\n            borderRadius: blockRadius,\n            '+ li': {\n              marginBlockStart: controlHeightXS\n            }\n          }\n        },\n        [\"\".concat(skeletonParagraphCls, \"> li:last-child:not(:first-child):not(:nth-child(2))\")]: {\n          width: '61%'\n        }\n      },\n      [\"&-round \".concat(componentCls, \"-content\")]: {\n        [\"\".concat(skeletonTitleCls, \", \").concat(skeletonParagraphCls, \" > li\")]: {\n          borderRadius\n        }\n      }\n    },\n    [\"\".concat(componentCls, \"-with-avatar \").concat(componentCls, \"-content\")]: {\n      // Title\n      [\"\".concat(skeletonTitleCls)]: {\n        marginBlockStart: marginSM,\n        [\"+ \".concat(skeletonParagraphCls)]: {\n          marginBlockStart: paragraphMarginTop\n        }\n      }\n    },\n    // Skeleton element\n    [\"\".concat(componentCls).concat(componentCls, \"-element\")]: Object.assign(Object.assign(Object.assign(Object.assign({\n      display: 'inline-block',\n      width: 'auto'\n    }, genSkeletonElementButton(token)), genSkeletonElementAvatar(token)), genSkeletonElementInput(token)), genSkeletonElementImage(token)),\n    // Skeleton Block Button, Input\n    [\"\".concat(componentCls).concat(componentCls, \"-block\")]: {\n      width: '100%',\n      [\"\".concat(skeletonButtonCls)]: {\n        width: '100%'\n      },\n      [\"\".concat(skeletonInputCls)]: {\n        width: '100%'\n      }\n    },\n    // With active animation\n    [\"\".concat(componentCls).concat(componentCls, \"-active\")]: {\n      [\"\\n        \".concat(skeletonTitleCls, \",\\n        \").concat(skeletonParagraphCls, \" > li,\\n        \").concat(skeletonAvatarCls, \",\\n        \").concat(skeletonButtonCls, \",\\n        \").concat(skeletonInputCls, \",\\n        \").concat(skeletonImageCls, \"\\n      \")]: Object.assign({}, genSkeletonColor(token))\n    }\n  };\n};\n// ============================== Export ==============================\nexport default genComponentStyleHook('Skeleton', token => {\n  const {\n    componentCls\n  } = token;\n  const skeletonToken = mergeToken(token, {\n    skeletonAvatarCls: \"\".concat(componentCls, \"-avatar\"),\n    skeletonTitleCls: \"\".concat(componentCls, \"-title\"),\n    skeletonParagraphCls: \"\".concat(componentCls, \"-paragraph\"),\n    skeletonButtonCls: \"\".concat(componentCls, \"-button\"),\n    skeletonInputCls: \"\".concat(componentCls, \"-input\"),\n    skeletonImageCls: \"\".concat(componentCls, \"-image\"),\n    imageSizeBase: token.controlHeight * 1.5,\n    borderRadius: 100,\n    skeletonLoadingBackground: \"linear-gradient(90deg, \".concat(token.gradientFromColor, \" 25%, \").concat(token.gradientToColor, \" 37%, \").concat(token.gradientFromColor, \" 63%)\"),\n    skeletonLoadingMotionDuration: '1.4s'\n  });\n  return [genBaseStyle(skeletonToken)];\n}, token => {\n  const {\n    colorFillContent,\n    colorFill\n  } = token;\n  const gradientFromColor = colorFillContent;\n  const gradientToColor = colorFill;\n  return {\n    color: gradientFromColor,\n    colorGradientEnd: gradientToColor,\n    gradientFromColor,\n    gradientToColor,\n    titleHeight: token.controlHeight / 2,\n    blockRadius: token.borderRadiusSM,\n    paragraphMarginTop: token.marginLG + token.marginXXS,\n    paragraphLiHeight: token.controlHeight / 2\n  };\n}, {\n  deprecatedTokens: [['color', 'gradientFromColor'], ['colorGradientEnd', 'gradientToColor']]\n});","map":{"version":3,"names":["Keyframes","genComponentStyleHook","mergeToken","skeletonClsLoading","backgroundPosition","genSkeletonElementCommonSize","size","height","lineHeight","concat","genSkeletonElementAvatarSize","Object","assign","width","genSkeletonColor","token","background","skeletonLoadingBackground","backgroundSize","animationName","animationDuration","skeletonLoadingMotionDuration","animationTimingFunction","animationIterationCount","genSkeletonElementInputSize","minWidth","genSkeletonElementAvatar","skeletonAvatarCls","gradientFromColor","controlHeight","controlHeightLG","controlHeightSM","display","verticalAlign","borderRadius","genSkeletonElementInput","borderRadiusSM","skeletonInputCls","genSkeletonElementImageSize","genSkeletonElementImage","skeletonImageCls","imageSizeBase","alignItems","justifyContent","fill","maxWidth","maxHeight","genSkeletonElementButtonShape","buttonCls","skeletonButtonCls","genSkeletonElementButtonSize","genSkeletonElementButton","genBaseStyle","componentCls","skeletonTitleCls","skeletonParagraphCls","padding","marginSM","titleHeight","blockRadius","paragraphLiHeight","controlHeightXS","paragraphMarginTop","paddingInlineEnd","marginBlockStart","listStyle","skeletonToken","gradientToColor","colorFillContent","colorFill","color","colorGradientEnd","marginLG","marginXXS","deprecatedTokens"],"sources":["C:/Users/HP/Downloads/Alagar_Clinic-main/Alagar_Clinic-main/Frontend/node_modules/antd/es/skeleton/style/index.js"],"sourcesContent":["\"use client\";\n\nimport { Keyframes } from '@ant-design/cssinjs';\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\nconst skeletonClsLoading = new Keyframes(`ant-skeleton-loading`, {\n  '0%': {\n    backgroundPosition: '100% 50%'\n  },\n  '100%': {\n    backgroundPosition: '0 50%'\n  }\n});\nconst genSkeletonElementCommonSize = size => ({\n  height: size,\n  lineHeight: `${size}px`\n});\nconst genSkeletonElementAvatarSize = size => Object.assign({\n  width: size\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonColor = token => ({\n  background: token.skeletonLoadingBackground,\n  backgroundSize: '400% 100%',\n  animationName: skeletonClsLoading,\n  animationDuration: token.skeletonLoadingMotionDuration,\n  animationTimingFunction: 'ease',\n  animationIterationCount: 'infinite'\n});\nconst genSkeletonElementInputSize = size => Object.assign({\n  width: size * 5,\n  minWidth: size * 5\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementAvatar = token => {\n  const {\n    skeletonAvatarCls,\n    gradientFromColor,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM\n  } = token;\n  return {\n    [`${skeletonAvatarCls}`]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: gradientFromColor\n    }, genSkeletonElementAvatarSize(controlHeight)),\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-circle`]: {\n      borderRadius: '50%'\n    },\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-lg`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG)),\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-sm`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))\n  };\n};\nconst genSkeletonElementInput = token => {\n  const {\n    controlHeight,\n    borderRadiusSM,\n    skeletonInputCls,\n    controlHeightLG,\n    controlHeightSM,\n    gradientFromColor\n  } = token;\n  return {\n    [`${skeletonInputCls}`]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: gradientFromColor,\n      borderRadius: borderRadiusSM\n    }, genSkeletonElementInputSize(controlHeight)),\n    [`${skeletonInputCls}-lg`]: Object.assign({}, genSkeletonElementInputSize(controlHeightLG)),\n    [`${skeletonInputCls}-sm`]: Object.assign({}, genSkeletonElementInputSize(controlHeightSM))\n  };\n};\nconst genSkeletonElementImageSize = size => Object.assign({\n  width: size\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementImage = token => {\n  const {\n    skeletonImageCls,\n    imageSizeBase,\n    gradientFromColor,\n    borderRadiusSM\n  } = token;\n  return {\n    [`${skeletonImageCls}`]: Object.assign(Object.assign({\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      verticalAlign: 'top',\n      background: gradientFromColor,\n      borderRadius: borderRadiusSM\n    }, genSkeletonElementImageSize(imageSizeBase * 2)), {\n      [`${skeletonImageCls}-path`]: {\n        fill: '#bfbfbf'\n      },\n      [`${skeletonImageCls}-svg`]: Object.assign(Object.assign({}, genSkeletonElementImageSize(imageSizeBase)), {\n        maxWidth: imageSizeBase * 4,\n        maxHeight: imageSizeBase * 4\n      }),\n      [`${skeletonImageCls}-svg${skeletonImageCls}-svg-circle`]: {\n        borderRadius: '50%'\n      }\n    }),\n    [`${skeletonImageCls}${skeletonImageCls}-circle`]: {\n      borderRadius: '50%'\n    }\n  };\n};\nconst genSkeletonElementButtonShape = (token, size, buttonCls) => {\n  const {\n    skeletonButtonCls\n  } = token;\n  return {\n    [`${buttonCls}${skeletonButtonCls}-circle`]: {\n      width: size,\n      minWidth: size,\n      borderRadius: '50%'\n    },\n    [`${buttonCls}${skeletonButtonCls}-round`]: {\n      borderRadius: size\n    }\n  };\n};\nconst genSkeletonElementButtonSize = size => Object.assign({\n  width: size * 2,\n  minWidth: size * 2\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementButton = token => {\n  const {\n    borderRadiusSM,\n    skeletonButtonCls,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    gradientFromColor\n  } = token;\n  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n    [`${skeletonButtonCls}`]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: gradientFromColor,\n      borderRadius: borderRadiusSM,\n      width: controlHeight * 2,\n      minWidth: controlHeight * 2\n    }, genSkeletonElementButtonSize(controlHeight))\n  }, genSkeletonElementButtonShape(token, controlHeight, skeletonButtonCls)), {\n    [`${skeletonButtonCls}-lg`]: Object.assign({}, genSkeletonElementButtonSize(controlHeightLG))\n  }), genSkeletonElementButtonShape(token, controlHeightLG, `${skeletonButtonCls}-lg`)), {\n    [`${skeletonButtonCls}-sm`]: Object.assign({}, genSkeletonElementButtonSize(controlHeightSM))\n  }), genSkeletonElementButtonShape(token, controlHeightSM, `${skeletonButtonCls}-sm`));\n};\n// =============================== Base ===============================\nconst genBaseStyle = token => {\n  const {\n    componentCls,\n    skeletonAvatarCls,\n    skeletonTitleCls,\n    skeletonParagraphCls,\n    skeletonButtonCls,\n    skeletonInputCls,\n    skeletonImageCls,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    gradientFromColor,\n    padding,\n    marginSM,\n    borderRadius,\n    titleHeight,\n    blockRadius,\n    paragraphLiHeight,\n    controlHeightXS,\n    paragraphMarginTop\n  } = token;\n  return {\n    [`${componentCls}`]: {\n      display: 'table',\n      width: '100%',\n      [`${componentCls}-header`]: {\n        display: 'table-cell',\n        paddingInlineEnd: padding,\n        verticalAlign: 'top',\n        // Avatar\n        [`${skeletonAvatarCls}`]: Object.assign({\n          display: 'inline-block',\n          verticalAlign: 'top',\n          background: gradientFromColor\n        }, genSkeletonElementAvatarSize(controlHeight)),\n        [`${skeletonAvatarCls}-circle`]: {\n          borderRadius: '50%'\n        },\n        [`${skeletonAvatarCls}-lg`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG)),\n        [`${skeletonAvatarCls}-sm`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))\n      },\n      [`${componentCls}-content`]: {\n        display: 'table-cell',\n        width: '100%',\n        verticalAlign: 'top',\n        // Title\n        [`${skeletonTitleCls}`]: {\n          width: '100%',\n          height: titleHeight,\n          background: gradientFromColor,\n          borderRadius: blockRadius,\n          [`+ ${skeletonParagraphCls}`]: {\n            marginBlockStart: controlHeightSM\n          }\n        },\n        // paragraph\n        [`${skeletonParagraphCls}`]: {\n          padding: 0,\n          '> li': {\n            width: '100%',\n            height: paragraphLiHeight,\n            listStyle: 'none',\n            background: gradientFromColor,\n            borderRadius: blockRadius,\n            '+ li': {\n              marginBlockStart: controlHeightXS\n            }\n          }\n        },\n        [`${skeletonParagraphCls}> li:last-child:not(:first-child):not(:nth-child(2))`]: {\n          width: '61%'\n        }\n      },\n      [`&-round ${componentCls}-content`]: {\n        [`${skeletonTitleCls}, ${skeletonParagraphCls} > li`]: {\n          borderRadius\n        }\n      }\n    },\n    [`${componentCls}-with-avatar ${componentCls}-content`]: {\n      // Title\n      [`${skeletonTitleCls}`]: {\n        marginBlockStart: marginSM,\n        [`+ ${skeletonParagraphCls}`]: {\n          marginBlockStart: paragraphMarginTop\n        }\n      }\n    },\n    // Skeleton element\n    [`${componentCls}${componentCls}-element`]: Object.assign(Object.assign(Object.assign(Object.assign({\n      display: 'inline-block',\n      width: 'auto'\n    }, genSkeletonElementButton(token)), genSkeletonElementAvatar(token)), genSkeletonElementInput(token)), genSkeletonElementImage(token)),\n    // Skeleton Block Button, Input\n    [`${componentCls}${componentCls}-block`]: {\n      width: '100%',\n      [`${skeletonButtonCls}`]: {\n        width: '100%'\n      },\n      [`${skeletonInputCls}`]: {\n        width: '100%'\n      }\n    },\n    // With active animation\n    [`${componentCls}${componentCls}-active`]: {\n      [`\n        ${skeletonTitleCls},\n        ${skeletonParagraphCls} > li,\n        ${skeletonAvatarCls},\n        ${skeletonButtonCls},\n        ${skeletonInputCls},\n        ${skeletonImageCls}\n      `]: Object.assign({}, genSkeletonColor(token))\n    }\n  };\n};\n// ============================== Export ==============================\nexport default genComponentStyleHook('Skeleton', token => {\n  const {\n    componentCls\n  } = token;\n  const skeletonToken = mergeToken(token, {\n    skeletonAvatarCls: `${componentCls}-avatar`,\n    skeletonTitleCls: `${componentCls}-title`,\n    skeletonParagraphCls: `${componentCls}-paragraph`,\n    skeletonButtonCls: `${componentCls}-button`,\n    skeletonInputCls: `${componentCls}-input`,\n    skeletonImageCls: `${componentCls}-image`,\n    imageSizeBase: token.controlHeight * 1.5,\n    borderRadius: 100,\n    skeletonLoadingBackground: `linear-gradient(90deg, ${token.gradientFromColor} 25%, ${token.gradientToColor} 37%, ${token.gradientFromColor} 63%)`,\n    skeletonLoadingMotionDuration: '1.4s'\n  });\n  return [genBaseStyle(skeletonToken)];\n}, token => {\n  const {\n    colorFillContent,\n    colorFill\n  } = token;\n  const gradientFromColor = colorFillContent;\n  const gradientToColor = colorFill;\n  return {\n    color: gradientFromColor,\n    colorGradientEnd: gradientToColor,\n    gradientFromColor,\n    gradientToColor,\n    titleHeight: token.controlHeight / 2,\n    blockRadius: token.borderRadiusSM,\n    paragraphMarginTop: token.marginLG + token.marginXXS,\n    paragraphLiHeight: token.controlHeight / 2\n  };\n}, {\n  deprecatedTokens: [['color', 'gradientFromColor'], ['colorGradientEnd', 'gradientToColor']]\n});"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,qBAAqB,EAAEC,UAAU,QAAQ,sBAAsB;AACxE,MAAMC,kBAAkB,GAAG,IAAIH,SAAS,yBAAyB;EAC/D,IAAI,EAAE;IACJI,kBAAkB,EAAE;EACtB,CAAC;EACD,MAAM,EAAE;IACNA,kBAAkB,EAAE;EACtB;AACF,CAAC,CAAC;AACF,MAAMC,4BAA4B,GAAGC,IAAI,KAAK;EAC5CC,MAAM,EAAED,IAAI;EACZE,UAAU,KAAAC,MAAA,CAAKH,IAAI;AACrB,CAAC,CAAC;AACF,MAAMI,4BAA4B,GAAGJ,IAAI,IAAIK,MAAM,CAACC,MAAM,CAAC;EACzDC,KAAK,EAAEP;AACT,CAAC,EAAED,4BAA4B,CAACC,IAAI,CAAC,CAAC;AACtC,MAAMQ,gBAAgB,GAAGC,KAAK,KAAK;EACjCC,UAAU,EAAED,KAAK,CAACE,yBAAyB;EAC3CC,cAAc,EAAE,WAAW;EAC3BC,aAAa,EAAEhB,kBAAkB;EACjCiB,iBAAiB,EAAEL,KAAK,CAACM,6BAA6B;EACtDC,uBAAuB,EAAE,MAAM;EAC/BC,uBAAuB,EAAE;AAC3B,CAAC,CAAC;AACF,MAAMC,2BAA2B,GAAGlB,IAAI,IAAIK,MAAM,CAACC,MAAM,CAAC;EACxDC,KAAK,EAAEP,IAAI,GAAG,CAAC;EACfmB,QAAQ,EAAEnB,IAAI,GAAG;AACnB,CAAC,EAAED,4BAA4B,CAACC,IAAI,CAAC,CAAC;AACtC,MAAMoB,wBAAwB,GAAGX,KAAK,IAAI;EACxC,MAAM;IACJY,iBAAiB;IACjBC,iBAAiB;IACjBC,aAAa;IACbC,eAAe;IACfC;EACF,CAAC,GAAGhB,KAAK;EACT,OAAO;IACL,IAAAN,MAAA,CAAIkB,iBAAiB,IAAKhB,MAAM,CAACC,MAAM,CAAC;MACtCoB,OAAO,EAAE,cAAc;MACvBC,aAAa,EAAE,KAAK;MACpBjB,UAAU,EAAEY;IACd,CAAC,EAAElB,4BAA4B,CAACmB,aAAa,CAAC,CAAC;IAC/C,IAAApB,MAAA,CAAIkB,iBAAiB,EAAAlB,MAAA,CAAGkB,iBAAiB,eAAY;MACnDO,YAAY,EAAE;IAChB,CAAC;IACD,IAAAzB,MAAA,CAAIkB,iBAAiB,EAAAlB,MAAA,CAAGkB,iBAAiB,WAAQhB,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,4BAA4B,CAACoB,eAAe,CAAC,CAAC;IACjH,IAAArB,MAAA,CAAIkB,iBAAiB,EAAAlB,MAAA,CAAGkB,iBAAiB,WAAQhB,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,4BAA4B,CAACqB,eAAe,CAAC;EAClH,CAAC;AACH,CAAC;AACD,MAAMI,uBAAuB,GAAGpB,KAAK,IAAI;EACvC,MAAM;IACJc,aAAa;IACbO,cAAc;IACdC,gBAAgB;IAChBP,eAAe;IACfC,eAAe;IACfH;EACF,CAAC,GAAGb,KAAK;EACT,OAAO;IACL,IAAAN,MAAA,CAAI4B,gBAAgB,IAAK1B,MAAM,CAACC,MAAM,CAAC;MACrCoB,OAAO,EAAE,cAAc;MACvBC,aAAa,EAAE,KAAK;MACpBjB,UAAU,EAAEY,iBAAiB;MAC7BM,YAAY,EAAEE;IAChB,CAAC,EAAEZ,2BAA2B,CAACK,aAAa,CAAC,CAAC;IAC9C,IAAApB,MAAA,CAAI4B,gBAAgB,WAAQ1B,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEY,2BAA2B,CAACM,eAAe,CAAC,CAAC;IAC3F,IAAArB,MAAA,CAAI4B,gBAAgB,WAAQ1B,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEY,2BAA2B,CAACO,eAAe,CAAC;EAC5F,CAAC;AACH,CAAC;AACD,MAAMO,2BAA2B,GAAGhC,IAAI,IAAIK,MAAM,CAACC,MAAM,CAAC;EACxDC,KAAK,EAAEP;AACT,CAAC,EAAED,4BAA4B,CAACC,IAAI,CAAC,CAAC;AACtC,MAAMiC,uBAAuB,GAAGxB,KAAK,IAAI;EACvC,MAAM;IACJyB,gBAAgB;IAChBC,aAAa;IACbb,iBAAiB;IACjBQ;EACF,CAAC,GAAGrB,KAAK;EACT,OAAO;IACL,IAAAN,MAAA,CAAI+B,gBAAgB,IAAK7B,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC;MACnDoB,OAAO,EAAE,MAAM;MACfU,UAAU,EAAE,QAAQ;MACpBC,cAAc,EAAE,QAAQ;MACxBV,aAAa,EAAE,KAAK;MACpBjB,UAAU,EAAEY,iBAAiB;MAC7BM,YAAY,EAAEE;IAChB,CAAC,EAAEE,2BAA2B,CAACG,aAAa,GAAG,CAAC,CAAC,CAAC,EAAE;MAClD,IAAAhC,MAAA,CAAI+B,gBAAgB,aAAU;QAC5BI,IAAI,EAAE;MACR,CAAC;MACD,IAAAnC,MAAA,CAAI+B,gBAAgB,YAAS7B,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE0B,2BAA2B,CAACG,aAAa,CAAC,CAAC,EAAE;QACxGI,QAAQ,EAAEJ,aAAa,GAAG,CAAC;QAC3BK,SAAS,EAAEL,aAAa,GAAG;MAC7B,CAAC,CAAC;MACF,IAAAhC,MAAA,CAAI+B,gBAAgB,UAAA/B,MAAA,CAAO+B,gBAAgB,mBAAgB;QACzDN,YAAY,EAAE;MAChB;IACF,CAAC,CAAC;IACF,IAAAzB,MAAA,CAAI+B,gBAAgB,EAAA/B,MAAA,CAAG+B,gBAAgB,eAAY;MACjDN,YAAY,EAAE;IAChB;EACF,CAAC;AACH,CAAC;AACD,MAAMa,6BAA6B,GAAGA,CAAChC,KAAK,EAAET,IAAI,EAAE0C,SAAS,KAAK;EAChE,MAAM;IACJC;EACF,CAAC,GAAGlC,KAAK;EACT,OAAO;IACL,IAAAN,MAAA,CAAIuC,SAAS,EAAAvC,MAAA,CAAGwC,iBAAiB,eAAY;MAC3CpC,KAAK,EAAEP,IAAI;MACXmB,QAAQ,EAAEnB,IAAI;MACd4B,YAAY,EAAE;IAChB,CAAC;IACD,IAAAzB,MAAA,CAAIuC,SAAS,EAAAvC,MAAA,CAAGwC,iBAAiB,cAAW;MAC1Cf,YAAY,EAAE5B;IAChB;EACF,CAAC;AACH,CAAC;AACD,MAAM4C,4BAA4B,GAAG5C,IAAI,IAAIK,MAAM,CAACC,MAAM,CAAC;EACzDC,KAAK,EAAEP,IAAI,GAAG,CAAC;EACfmB,QAAQ,EAAEnB,IAAI,GAAG;AACnB,CAAC,EAAED,4BAA4B,CAACC,IAAI,CAAC,CAAC;AACtC,MAAM6C,wBAAwB,GAAGpC,KAAK,IAAI;EACxC,MAAM;IACJqB,cAAc;IACda,iBAAiB;IACjBpB,aAAa;IACbC,eAAe;IACfC,eAAe;IACfH;EACF,CAAC,GAAGb,KAAK;EACT,OAAOJ,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC;IAC3E,IAAAH,MAAA,CAAIwC,iBAAiB,IAAKtC,MAAM,CAACC,MAAM,CAAC;MACtCoB,OAAO,EAAE,cAAc;MACvBC,aAAa,EAAE,KAAK;MACpBjB,UAAU,EAAEY,iBAAiB;MAC7BM,YAAY,EAAEE,cAAc;MAC5BvB,KAAK,EAAEgB,aAAa,GAAG,CAAC;MACxBJ,QAAQ,EAAEI,aAAa,GAAG;IAC5B,CAAC,EAAEqB,4BAA4B,CAACrB,aAAa,CAAC;EAChD,CAAC,EAAEkB,6BAA6B,CAAChC,KAAK,EAAEc,aAAa,EAAEoB,iBAAiB,CAAC,CAAC,EAAE;IAC1E,IAAAxC,MAAA,CAAIwC,iBAAiB,WAAQtC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEsC,4BAA4B,CAACpB,eAAe,CAAC;EAC9F,CAAC,CAAC,EAAEiB,6BAA6B,CAAChC,KAAK,EAAEe,eAAe,KAAArB,MAAA,CAAKwC,iBAAiB,QAAK,CAAC,CAAC,EAAE;IACrF,IAAAxC,MAAA,CAAIwC,iBAAiB,WAAQtC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEsC,4BAA4B,CAACnB,eAAe,CAAC;EAC9F,CAAC,CAAC,EAAEgB,6BAA6B,CAAChC,KAAK,EAAEgB,eAAe,KAAAtB,MAAA,CAAKwC,iBAAiB,QAAK,CAAC,CAAC;AACvF,CAAC;AACD;AACA,MAAMG,YAAY,GAAGrC,KAAK,IAAI;EAC5B,MAAM;IACJsC,YAAY;IACZ1B,iBAAiB;IACjB2B,gBAAgB;IAChBC,oBAAoB;IACpBN,iBAAiB;IACjBZ,gBAAgB;IAChBG,gBAAgB;IAChBX,aAAa;IACbC,eAAe;IACfC,eAAe;IACfH,iBAAiB;IACjB4B,OAAO;IACPC,QAAQ;IACRvB,YAAY;IACZwB,WAAW;IACXC,WAAW;IACXC,iBAAiB;IACjBC,eAAe;IACfC;EACF,CAAC,GAAG/C,KAAK;EACT,OAAO;IACL,IAAAN,MAAA,CAAI4C,YAAY,IAAK;MACnBrB,OAAO,EAAE,OAAO;MAChBnB,KAAK,EAAE,MAAM;MACb,IAAAJ,MAAA,CAAI4C,YAAY,eAAY;QAC1BrB,OAAO,EAAE,YAAY;QACrB+B,gBAAgB,EAAEP,OAAO;QACzBvB,aAAa,EAAE,KAAK;QACpB;QACA,IAAAxB,MAAA,CAAIkB,iBAAiB,IAAKhB,MAAM,CAACC,MAAM,CAAC;UACtCoB,OAAO,EAAE,cAAc;UACvBC,aAAa,EAAE,KAAK;UACpBjB,UAAU,EAAEY;QACd,CAAC,EAAElB,4BAA4B,CAACmB,aAAa,CAAC,CAAC;QAC/C,IAAApB,MAAA,CAAIkB,iBAAiB,eAAY;UAC/BO,YAAY,EAAE;QAChB,CAAC;QACD,IAAAzB,MAAA,CAAIkB,iBAAiB,WAAQhB,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,4BAA4B,CAACoB,eAAe,CAAC,CAAC;QAC7F,IAAArB,MAAA,CAAIkB,iBAAiB,WAAQhB,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,4BAA4B,CAACqB,eAAe,CAAC;MAC9F,CAAC;MACD,IAAAtB,MAAA,CAAI4C,YAAY,gBAAa;QAC3BrB,OAAO,EAAE,YAAY;QACrBnB,KAAK,EAAE,MAAM;QACboB,aAAa,EAAE,KAAK;QACpB;QACA,IAAAxB,MAAA,CAAI6C,gBAAgB,IAAK;UACvBzC,KAAK,EAAE,MAAM;UACbN,MAAM,EAAEmD,WAAW;UACnB1C,UAAU,EAAEY,iBAAiB;UAC7BM,YAAY,EAAEyB,WAAW;UACzB,MAAAlD,MAAA,CAAM8C,oBAAoB,IAAK;YAC7BS,gBAAgB,EAAEjC;UACpB;QACF,CAAC;QACD;QACA,IAAAtB,MAAA,CAAI8C,oBAAoB,IAAK;UAC3BC,OAAO,EAAE,CAAC;UACV,MAAM,EAAE;YACN3C,KAAK,EAAE,MAAM;YACbN,MAAM,EAAEqD,iBAAiB;YACzBK,SAAS,EAAE,MAAM;YACjBjD,UAAU,EAAEY,iBAAiB;YAC7BM,YAAY,EAAEyB,WAAW;YACzB,MAAM,EAAE;cACNK,gBAAgB,EAAEH;YACpB;UACF;QACF,CAAC;QACD,IAAApD,MAAA,CAAI8C,oBAAoB,4DAAyD;UAC/E1C,KAAK,EAAE;QACT;MACF,CAAC;MACD,YAAAJ,MAAA,CAAY4C,YAAY,gBAAa;QACnC,IAAA5C,MAAA,CAAI6C,gBAAgB,QAAA7C,MAAA,CAAK8C,oBAAoB,aAAU;UACrDrB;QACF;MACF;IACF,CAAC;IACD,IAAAzB,MAAA,CAAI4C,YAAY,mBAAA5C,MAAA,CAAgB4C,YAAY,gBAAa;MACvD;MACA,IAAA5C,MAAA,CAAI6C,gBAAgB,IAAK;QACvBU,gBAAgB,EAAEP,QAAQ;QAC1B,MAAAhD,MAAA,CAAM8C,oBAAoB,IAAK;UAC7BS,gBAAgB,EAAEF;QACpB;MACF;IACF,CAAC;IACD;IACA,IAAArD,MAAA,CAAI4C,YAAY,EAAA5C,MAAA,CAAG4C,YAAY,gBAAa1C,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC;MAClGoB,OAAO,EAAE,cAAc;MACvBnB,KAAK,EAAE;IACT,CAAC,EAAEsC,wBAAwB,CAACpC,KAAK,CAAC,CAAC,EAAEW,wBAAwB,CAACX,KAAK,CAAC,CAAC,EAAEoB,uBAAuB,CAACpB,KAAK,CAAC,CAAC,EAAEwB,uBAAuB,CAACxB,KAAK,CAAC,CAAC;IACvI;IACA,IAAAN,MAAA,CAAI4C,YAAY,EAAA5C,MAAA,CAAG4C,YAAY,cAAW;MACxCxC,KAAK,EAAE,MAAM;MACb,IAAAJ,MAAA,CAAIwC,iBAAiB,IAAK;QACxBpC,KAAK,EAAE;MACT,CAAC;MACD,IAAAJ,MAAA,CAAI4B,gBAAgB,IAAK;QACvBxB,KAAK,EAAE;MACT;IACF,CAAC;IACD;IACA,IAAAJ,MAAA,CAAI4C,YAAY,EAAA5C,MAAA,CAAG4C,YAAY,eAAY;MACzC,cAAA5C,MAAA,CACI6C,gBAAgB,iBAAA7C,MAAA,CAChB8C,oBAAoB,sBAAA9C,MAAA,CACpBkB,iBAAiB,iBAAAlB,MAAA,CACjBwC,iBAAiB,iBAAAxC,MAAA,CACjB4B,gBAAgB,iBAAA5B,MAAA,CAChB+B,gBAAgB,gBAChB7B,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEE,gBAAgB,CAACC,KAAK,CAAC;IAC/C;EACF,CAAC;AACH,CAAC;AACD;AACA,eAAed,qBAAqB,CAAC,UAAU,EAAEc,KAAK,IAAI;EACxD,MAAM;IACJsC;EACF,CAAC,GAAGtC,KAAK;EACT,MAAMmD,aAAa,GAAGhE,UAAU,CAACa,KAAK,EAAE;IACtCY,iBAAiB,KAAAlB,MAAA,CAAK4C,YAAY,YAAS;IAC3CC,gBAAgB,KAAA7C,MAAA,CAAK4C,YAAY,WAAQ;IACzCE,oBAAoB,KAAA9C,MAAA,CAAK4C,YAAY,eAAY;IACjDJ,iBAAiB,KAAAxC,MAAA,CAAK4C,YAAY,YAAS;IAC3ChB,gBAAgB,KAAA5B,MAAA,CAAK4C,YAAY,WAAQ;IACzCb,gBAAgB,KAAA/B,MAAA,CAAK4C,YAAY,WAAQ;IACzCZ,aAAa,EAAE1B,KAAK,CAACc,aAAa,GAAG,GAAG;IACxCK,YAAY,EAAE,GAAG;IACjBjB,yBAAyB,4BAAAR,MAAA,CAA4BM,KAAK,CAACa,iBAAiB,YAAAnB,MAAA,CAASM,KAAK,CAACoD,eAAe,YAAA1D,MAAA,CAASM,KAAK,CAACa,iBAAiB,UAAO;IACjJP,6BAA6B,EAAE;EACjC,CAAC,CAAC;EACF,OAAO,CAAC+B,YAAY,CAACc,aAAa,CAAC,CAAC;AACtC,CAAC,EAAEnD,KAAK,IAAI;EACV,MAAM;IACJqD,gBAAgB;IAChBC;EACF,CAAC,GAAGtD,KAAK;EACT,MAAMa,iBAAiB,GAAGwC,gBAAgB;EAC1C,MAAMD,eAAe,GAAGE,SAAS;EACjC,OAAO;IACLC,KAAK,EAAE1C,iBAAiB;IACxB2C,gBAAgB,EAAEJ,eAAe;IACjCvC,iBAAiB;IACjBuC,eAAe;IACfT,WAAW,EAAE3C,KAAK,CAACc,aAAa,GAAG,CAAC;IACpC8B,WAAW,EAAE5C,KAAK,CAACqB,cAAc;IACjC0B,kBAAkB,EAAE/C,KAAK,CAACyD,QAAQ,GAAGzD,KAAK,CAAC0D,SAAS;IACpDb,iBAAiB,EAAE7C,KAAK,CAACc,aAAa,GAAG;EAC3C,CAAC;AACH,CAAC,EAAE;EACD6C,gBAAgB,EAAE,CAAC,CAAC,OAAO,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,iBAAiB,CAAC;AAC5F,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}